{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["cities","name","value","gasTypeList","App","useState","result","setResult","city","setCity","gasType","setGasType","getResp","gas","a","fetch","response","json","data","regex","RegExp","filter","collection","e","attributes","Naselenyy_punkt","notification","match","getAval","res","reg1","reg2","matchedSites","arr","copy","JSON","parse","stringify","map","slice","search","forEach","i","cutter","className","htmlFor","id","onChange","c","target","type","onClick","Adresa","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20cbebbc.chunk.js","sourcesContent":["import { useRef, useState } from 'react'\nimport './App.css';\n\nconst cities = [\n  {name: \"Вся Україна\", value: \"\"},\n  {name: \"Київ\", value: \"Київ\"},\n  {name: \"Львів\", value: \"Львів\"},\n  {name: \"Луцьк\", value: \"Луцьк\"},\n  {name: \"Івано-Франківськ\", value: \"Івано-Франківськ\"},\n  {name: \"Рівне\", value: \"Рівне\"},\n  {name: \"Тернопіль\", value: \"Тернопіль\"},\n];\n\nconst gasTypeList = [\n  {name: \"Всі типи\", value: \"\"},\n  {name: \"PULLS 95\", value: \"PULLS 95\"},\n  {name: \"А-95\", value: \"А-95\"},\n  {name: \"ДП\", value: \"ДП\"},\n  {name: \"PULLS Diesel\", value: \"PULLS Diesel\"},\n];\n\n\n\nfunction App() {\n  // const [riskInUSD, setRiskInUSD] = useState('');\n  // const [totals, setTotals] = useState({});\n  // const depo_Ref = useRef()\n  // const risk_Ref = useRef()\n  // const fibo0_Ref = useRef()\n  // const fibo100_Ref = useRef()\n  // const stop_loss_Ref = useRef()\n\n  // const COEF = 1.1;\n  // const COEF_STEP = 0.1;\n  // const COEF_MAX = 2;\n  // const START_ORDER = 11;\n  // const ORDER_STEP = 1;\n\n  // // const fiboLevels = [0.236, 0.382, 0.5, 0.618, 0.786]\n  // const fiboLevels = [0.382, 0.5, 0.618, 0.786]\n\n  // const handleRiskChange = e => {\n  //   const depo_val = depo_Ref.current.value;\n  //   const risk_val = risk_Ref.current.value;\n\n  //   setRiskInUSD(depo_val * risk_val / 100);\n  // }\n\n  // const getFiboValues = () => {\n  //   const fibo0_val = fibo0_Ref.current.value\n  //   const fibo100_val = fibo100_Ref.current.value\n  //   const spread = fibo0_val - fibo100_val;\n\n  //   return fiboLevels.map((e) => Number((fibo0_val - spread * e).toFixed(4)));\n  // };\n\n  // const getTotals = (levels) => {\n  //   const stop_loss_val = stop_loss_Ref.current.value;\n  //   const usdUsedLimit = depo_Ref.current.value / 10;\n  //   let usdOnLevels;\n  //   let totalInOrder;\n  //   let quantity;\n  //   let stopLoss = 0;\n\n  //   for (let p = 0; ; p++) {\n  //     let firstOrder = START_ORDER + ORDER_STEP * p;\n\n  //     if (stopLoss > stop_loss_val || totalInOrder > usdUsedLimit) {\n  //       break\n  //     } else {\n  //       for (let c = 0; ; c++) {\n  //         let stepCoef = Number((COEF + COEF_STEP * c).toFixed(1));\n\n  //         if (stepCoef > COEF_MAX) break;\n\n  //         usdOnLevels = [];\n  //         for (let i = 0; i < levels.length; i++) {\n  //           if (i === 0) {\n  //             usdOnLevels.push(firstOrder);\n  //           } else {\n  //             usdOnLevels.push(Number((usdOnLevels[i-1] * stepCoef).toFixed(2)));\n  //           }\n  //         }\n          \n  //         totalInOrder = Number((usdOnLevels.reduce((partial_sum, a) => partial_sum + a,0)).toFixed(7));\n  //         quantity = Number((levels.map((e, i) => usdOnLevels[i] / e).reduce((partial_sum, a) => partial_sum + a,0)).toFixed(7));\n  //         stopLoss = Number(((totalInOrder - riskInUSD) / quantity).toFixed(4));\n  //       }\n  //     }\n  //   }\n\n  //   return {\n  //     totalInOrder,\n  //     quantity,\n  //     stopLoss,\n  //     usdOnLevels,\n  //   }\n\n  // }\n\n  // const calculate = (e) => {\n  //   e.preventDefault();\n\n  //   const levels = getFiboValues();\n  //   setTotals(getTotals(levels));\n\n  //   console.log(totals.totalInOrder);\n  //   console.log(totals.quantity);\n  //   console.log(totals.stopLoss);\n  //   console.log(totals.usdOnLevels);\n  // }\n\n\n  const [result, setResult] = useState('');\n  const [city, setCity] = useState('');\n  const [gasType, setGasType] = useState('');\n\n\n  const getResp = async (city, gas) => {\n    const response = await fetch('https://www.okko.ua/api/uk/type/gas_stations?');\n    const data = await response.json();\n    const regex = new RegExp(gas);\n\n    const filter = data.collection.filter(e => e.attributes.Naselenyy_punkt === city).filter((e) => e.attributes.notification.match(regex));\n\n    if (city) {\n      setResult(filter)\n    } else {\n      setResult(data.collection)\n    }\n  }\n\n  const cutter = (arr) => {\n    const reg1 = /З ПАЛИВНОЮ КАРТКОЮ І ТАЛОНАМИ ДОСТУПНО:/i;\n    const copy = JSON.parse(JSON.stringify(arr));\n    const cutRes = arr.map(e => e.attributes.notification.slice(0, e.attributes.notification.search(reg1)))\n\n    cutRes.forEach((e,i) => {\n      copy[i].attributes.notification = e;\n    });\n\n    return copy;\n  }\n  \n  const getAval = (res) => {\n    const reg1 = /ЗА ГОТІВКУ І БАНКІВСЬКІ КАРТКИ ДОСТУПНО:\\*:/i;\n    const reg2 = new RegExp(gasType);\n    const matchedSites = cutter(res).filter((e) => e.attributes.notification.match(reg1)).filter((e) => e.attributes.notification.match(reg2));\n\n    setResult(matchedSites);\n  }\n\n  const handleCityChange = (e) => {\n    const c = e.target.value;\n    setCity(c);\n    getResp(c, gasType);\n  }\n\n  const handleGasTypeChange = (e) => {\n    const gas = e.target.value;\n    setGasType(gas);\n    getResp(city, gas);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>OKKO фільтр</h1>\n      {/* <button type='button' onClick={() => getResp('')}>Get All AZS</button> */}\n      {/* <button type='button' onClick={() => getAval(result)}>Get AVAL</button> */}\n      <br /><br />\n      <p>\n        <label htmlFor=\"city\">Обери місто</label>\n        <select name=\"city\" id=\"city\" value={city} onChange={handleCityChange}>\n          {cities.map(e => <option value={e.value} >{e.name}</option>)}\n        </select>\n      </p>\n      <p>\n        <label htmlFor=\"\">Обери паливо</label>\n        <select name=\"gasType\" id=\"gasType\" value={gasType} onChange={handleGasTypeChange}>\n          {gasTypeList.map(e => <option value={e.value} >{e.name}</option>)}\n        </select>\n        <br />\n        <small><i>буде показанно всі заправки де є колонки з обраним типом палива</i></small>\n      </p>\n      <p>\n        <button type='button' onClick={() => getAval([...result])}>Показати де обране паливо доступне з Fishka</button>\n      </p>\n      <br /><br /><br /><br />\n      <ul>\n        {result && result.map(e => <><li>\n          <p>{e.attributes.Naselenyy_punkt} - {e.attributes.Adresa}</p>\n          <br />\n          <div dangerouslySetInnerHTML={{ __html: e.attributes.notification }} />\n        </li><hr /></>)}\n      </ul>\n      {/* <header className=\"App-header\">\n        <form onSubmit={calculate}>\n          <table>\n            <tbody>\n              <tr>\n                <td>Deposit</td>\n                <td><input ref={depo_Ref} type=\"text\" id=\"deposit\" /></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>Risk, %</td>\n                <td><input ref={risk_Ref} type=\"text\" id=\"risk\" onChange={handleRiskChange} /></td>\n                <td>{riskInUSD && `${riskInUSD}$`}</td>\n              </tr>\n              <tr>\n                <td>Fibo 0%</td>\n                <td><input ref={fibo0_Ref} type=\"text\" id=\"fibo0\" /></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>Fibo 100%</td>\n                <td><input ref={fibo100_Ref} type=\"text\" id=\"fibo100\" /></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>SL</td>\n                <td><input ref={stop_loss_Ref} type=\"text\" id=\"stop_loss\" /></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td colSpan={3}><button>Calculate</button></td>\n              </tr>\n            </tbody>\n          </table>\n        </form>\n        <h3>Result:</h3>\n        <table>\n          <tbody>\n            {totals.usdOnLevels && fiboLevels.map((e, i) => (\n              <tr>\n                <td>L: {(e * 100).toFixed(1)}</td>\n                <td>&nbsp;&nbsp;{totals.usdOnLevels[i]}$</td>\n                <td>&nbsp;&nbsp;{(totals.usdOnLevels[i] * 100 / totals.totalInOrder).toFixed(1)}%</td>\n              </tr>\n            ))}\n            <tr>\n              <td>Total, $</td>\n              <td colSpan={2}>{totals.totalInOrder}</td>\n            </tr>\n          </tbody>\n        </table>\n      </header> */}\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}