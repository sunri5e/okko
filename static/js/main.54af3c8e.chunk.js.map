{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["cities","name","value","gasTypeList","App","useState","result","setResult","city","setCity","gasType","setGasType","getResp","gas","a","fetch","response","json","data","regex","RegExp","filter","collection","e","attributes","Naselenyy_punkt","notification","match","getAval","res","reg1","reg2","matchedSites","arr","copy","JSON","parse","stringify","map","slice","search","forEach","i","cutter","className","htmlFor","id","onChange","c","target","xmlns","viewBox","d","type","onClick","length","Adresa","dangerouslySetInnerHTML","__html","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54af3c8e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst cities = [\n  { name: \"Вся Україна\", value: \"\" },\n  { name: \"Київ\", value: \"Київ\" },\n  { name: \"Львів\", value: \"Львів\" },\n  { name: \"Луцьк\", value: \"Луцьк\" },\n  { name: \"Івано-Франківськ\", value: \"Івано-Франківськ\" },\n  { name: \"Рівне\", value: \"Рівне\" },\n  { name: \"Тернопіль\", value: \"Тернопіль\" },\n];\n\nconst gasTypeList = [\n  { name: \"Всі типи\", value: \"\" },\n  { name: \"PULLS 95\", value: \"PULLS 95\" },\n  { name: \"А-95\", value: \"А-95\" },\n  { name: \"ДП\", value: \"ДП\" },\n  { name: \"PULLS Diesel\", value: \"PULLS Diesel\" },\n];\n\nfunction App() {\n  // const [riskInUSD, setRiskInUSD] = useState('');\n  // const [totals, setTotals] = useState({});\n  // const depo_Ref = useRef()\n  // const risk_Ref = useRef()\n  // const fibo0_Ref = useRef()\n  // const fibo100_Ref = useRef()\n  // const stop_loss_Ref = useRef()\n\n  // const COEF = 1.1;\n  // const COEF_STEP = 0.1;\n  // const COEF_MAX = 2;\n  // const START_ORDER = 11;\n  // const ORDER_STEP = 1;\n\n  // // const fiboLevels = [0.236, 0.382, 0.5, 0.618, 0.786]\n  // const fiboLevels = [0.382, 0.5, 0.618, 0.786]\n\n  // const handleRiskChange = e => {\n  //   const depo_val = depo_Ref.current.value;\n  //   const risk_val = risk_Ref.current.value;\n\n  //   setRiskInUSD(depo_val * risk_val / 100);\n  // }\n\n  // const getFiboValues = () => {\n  //   const fibo0_val = fibo0_Ref.current.value\n  //   const fibo100_val = fibo100_Ref.current.value\n  //   const spread = fibo0_val - fibo100_val;\n\n  //   return fiboLevels.map((e) => Number((fibo0_val - spread * e).toFixed(4)));\n  // };\n\n  // const getTotals = (levels) => {\n  //   const stop_loss_val = stop_loss_Ref.current.value;\n  //   const usdUsedLimit = depo_Ref.current.value / 10;\n  //   let usdOnLevels;\n  //   let totalInOrder;\n  //   let quantity;\n  //   let stopLoss = 0;\n\n  //   for (let p = 0; ; p++) {\n  //     let firstOrder = START_ORDER + ORDER_STEP * p;\n\n  //     if (stopLoss > stop_loss_val || totalInOrder > usdUsedLimit) {\n  //       break\n  //     } else {\n  //       for (let c = 0; ; c++) {\n  //         let stepCoef = Number((COEF + COEF_STEP * c).toFixed(1));\n\n  //         if (stepCoef > COEF_MAX) break;\n\n  //         usdOnLevels = [];\n  //         for (let i = 0; i < levels.length; i++) {\n  //           if (i === 0) {\n  //             usdOnLevels.push(firstOrder);\n  //           } else {\n  //             usdOnLevels.push(Number((usdOnLevels[i-1] * stepCoef).toFixed(2)));\n  //           }\n  //         }\n\n  //         totalInOrder = Number((usdOnLevels.reduce((partial_sum, a) => partial_sum + a,0)).toFixed(7));\n  //         quantity = Number((levels.map((e, i) => usdOnLevels[i] / e).reduce((partial_sum, a) => partial_sum + a,0)).toFixed(7));\n  //         stopLoss = Number(((totalInOrder - riskInUSD) / quantity).toFixed(4));\n  //       }\n  //     }\n  //   }\n\n  //   return {\n  //     totalInOrder,\n  //     quantity,\n  //     stopLoss,\n  //     usdOnLevels,\n  //   }\n\n  // }\n\n  // const calculate = (e) => {\n  //   e.preventDefault();\n\n  //   const levels = getFiboValues();\n  //   setTotals(getTotals(levels));\n\n  //   console.log(totals.totalInOrder);\n  //   console.log(totals.quantity);\n  //   console.log(totals.stopLoss);\n  //   console.log(totals.usdOnLevels);\n  // }\n\n  const [result, setResult] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [gasType, setGasType] = useState(\"\");\n\n  const getResp = async (city, gas) => {\n    const response = await fetch(\n      \"https://www.okko.ua/api/uk/type/gas_stations?\"\n    );\n    const data = await response.json();\n    const regex = new RegExp(gas);\n\n    const filter = data.collection\n      .filter((e) => e.attributes.Naselenyy_punkt === city)\n      .filter((e) => e.attributes.notification.match(regex));\n\n    if (city) {\n      setResult(filter);\n    } else {\n      setResult(data.collection);\n    }\n  };\n\n  const cutter = (arr) => {\n    const reg1 = /З ПАЛИВНОЮ КАРТКОЮ І ТАЛОНАМИ ДОСТУПНО:/i;\n    const copy = JSON.parse(JSON.stringify(arr));\n    const cutRes = arr.map((e) =>\n      e.attributes.notification.slice(0, e.attributes.notification.search(reg1))\n    );\n\n    cutRes.forEach((e, i) => {\n      copy[i].attributes.notification = e;\n    });\n\n    return copy;\n  };\n\n  const getAval = (res) => {\n    const reg1 = /ЗА ГОТІВКУ І БАНКІВСЬКІ КАРТКИ ДОСТУПНО:\\*:/i;\n    const reg2 = new RegExp(gasType);\n    const matchedSites = cutter(res)\n      .filter((e) => e.attributes.notification.match(reg1))\n      .filter((e) => e.attributes.notification.match(reg2));\n\n    setResult(matchedSites);\n  };\n\n  const handleCityChange = (e) => {\n    const c = e.target.value;\n    setCity(c);\n    getResp(c, gasType);\n  };\n\n  const handleGasTypeChange = (e) => {\n    const gas = e.target.value;\n    setGasType(gas);\n    getResp(city, gas);\n  };\n\n  return (\n    <div className=\"App container mx-auto px-8 pt-10 pb-20\">\n      <h1 className=\"text-2xl font-bold text-center mb-8\">OKKO фільтр</h1>\n      {/* <button type='button' onClick={() => getResp('')}>Get All AZS</button> */}\n      {/* <button type='button' onClick={() => getAval(result)}>Get AVAL</button> */}\n      <div className=\"w-full max-w-lg mx-auto\">\n        <p className=\"md:flex md:items-center mb-6\">\n          <label\n            className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 md:w-1/4\"\n            htmlFor=\"city\"\n          >\n            Обери місто\n          </label>\n          <div className=\"relative md:w-3/4\">\n            <select\n              name=\"city\"\n              id=\"city\"\n              value={city}\n              onChange={handleCityChange}\n              className=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n            >\n              {cities.map((e, i) => (\n                <option key={i} value={e.value}>\n                  {e.name}\n                </option>\n              ))}\n            </select>\n            <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n              <svg\n                className=\"fill-current h-4 w-4\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n              </svg>\n            </div>\n          </div>\n        </p>\n        <div className=\"mb-6\">\n          <p className=\"md:flex md:items-center\">\n            <label\n              className=\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 md:w-1/4\"\n              htmlFor=\"gasType\"\n            >\n              Обери паливо\n            </label>\n            <div className=\"md:w-3/4\">\n              <div className=\"relative\">\n                <select\n                  name=\"gasType\"\n                  id=\"gasType\"\n                  value={gasType}\n                  onChange={handleGasTypeChange}\n                  className=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n                >\n                  {gasTypeList.map((e, i) => (\n                    <option key={i} value={e.value}>\n                      {e.name}\n                    </option>\n                  ))}\n                </select>\n                <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    className=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n              </div>\n            </div>\n          </p>\n          <div className=\"md:text-right\">\n            <small>\n              <i>буде показанно всі АЗС де є колонки з обраним типом палива</i>\n            </small>\n          </div>\n        </div>\n        <p className=\"text-right\">\n          <button\n            className=\"px-4 py-2 font-semibold text-sm bg-cyan-500 text-white rounded-full shadow-sm\"\n            type=\"button\"\n            onClick={() => getAval([...result])}\n          >\n            Показати де обране паливо доступне з Fishka\n          </button>\n        </p>\n      </div>\n      {result && result.length ? (\n        <ul className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-16\">\n          {result.map((e, i) => (\n            <li\n              key={i}\n              className=\"bg-white border-2 border-green-500/100 p-4 rounded-lg shadow-xl text-center\"\n            >\n              <p>\n                {e.attributes.Naselenyy_punkt} - {e.attributes.Adresa}\n              </p>\n              <br />\n              <div\n                dangerouslySetInnerHTML={{ __html: e.attributes.notification }}\n              />\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <div className=\"w-full max-w-lg mx-auto mt-16\">\n          {!city && !gasType ? (\n            <div className=\"text-center\">\n              <p className=\"mb-6 text-gray-500\">\n                {`Для показу результатів введіть спершу свій запит`}\n              </p>\n              <img\n                src=\"https://i.gifer.com/1xZ.gif\"\n                alt=\"John Travolta confused\"\n                className=\"object-cover w-full rounded-lg\"\n              />\n            </div>\n          ) : (\n            <div className=\"text-center\">\n              <p className=\"mb-6 text-gray-500\">\n                {`На даний момент паливо марки ${gasType} відсутнє у вільному доступі у місті ${city} `}\n              </p>\n              <img\n                src=\"https://i.gifer.com/5LSi.gif\"\n                alt=\"John Travolta confused\"\n                className=\"object-cover w-full rounded-lg\"\n              />\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* <header className=\"App-header\">\n        <form onSubmit={calculate}>\n          <table>\n            <tbody>\n              <tr>\n                <td>Deposit</td>\n                <td><input ref={depo_Ref} type=\"text\" id=\"deposit\" /></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>Risk, %</td>\n                <td><input ref={risk_Ref} type=\"text\" id=\"risk\" onChange={handleRiskChange} /></td>\n                <td>{riskInUSD && `${riskInUSD}$`}</td>\n              </tr>\n              <tr>\n                <td>Fibo 0%</td>\n                <td><input ref={fibo0_Ref} type=\"text\" id=\"fibo0\" /></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>Fibo 100%</td>\n                <td><input ref={fibo100_Ref} type=\"text\" id=\"fibo100\" /></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>SL</td>\n                <td><input ref={stop_loss_Ref} type=\"text\" id=\"stop_loss\" /></td>\n                <td></td>\n              </tr>\n              <tr>\n                <td colSpan={3}><button>Calculate</button></td>\n              </tr>\n            </tbody>\n          </table>\n        </form>\n        <h3>Result:</h3>\n        <table>\n          <tbody>\n            {totals.usdOnLevels && fiboLevels.map((e, i) => (\n              <tr>\n                <td>L: {(e * 100).toFixed(1)}</td>\n                <td>&nbsp;&nbsp;{totals.usdOnLevels[i]}$</td>\n                <td>&nbsp;&nbsp;{(totals.usdOnLevels[i] * 100 / totals.totalInOrder).toFixed(1)}%</td>\n              </tr>\n            ))}\n            <tr>\n              <td>Total, $</td>\n              <td colSpan={2}>{totals.totalInOrder}</td>\n            </tr>\n          </tbody>\n        </table>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}